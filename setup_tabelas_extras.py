# setup_tabelas_extras.py
"""Setup das tabelas extras para o PostgreSQL"""

import os
import psycopg2

def criar_tabelas_extras():
    """Cria as tabelas que o c√≥digo est√° tentando usar"""
    
    try:
        # Conecta ao PostgreSQL
        database_url = os.environ.get('DATABASE_URL')
        if not database_url:
            print("‚ùå DATABASE_URL n√£o encontrada")
            return False
            
        conn = psycopg2.connect(database_url)
        cursor = conn.cursor()
        
        print("üîó Conectado ao PostgreSQL...")
        
        # Cria schema dimensoes se n√£o existir
        cursor.execute("CREATE SCHEMA IF NOT EXISTS dimensoes")
        print("‚úÖ Schema 'dimensoes' criado")
        
        # Cria tabela unidades_gestoras
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS dimensoes.unidades_gestoras (
                COUG VARCHAR(10) PRIMARY KEY,
                NOUG VARCHAR(100) NOT NULL
            )
        """)
        print("‚úÖ Tabela 'dimensoes.unidades_gestoras' criada")
        
        # Insere dados de exemplo
        cursor.execute("""
            INSERT INTO dimensoes.unidades_gestoras (COUG, NOUG) 
            VALUES 
                ('001', 'Secretaria de Administra√ß√£o'),
                ('002', 'Secretaria de Finan√ßas'),
                ('003', 'Secretaria de Educa√ß√£o'),
                ('004', 'Secretaria de Sa√∫de'),
                ('005', 'Secretaria de Obras')
            ON CONFLICT (COUG) DO NOTHING
        """)
        
        # Cria outras tabelas dimens√µes que podem ser necess√°rias
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS dimensoes.categorias (
                COCATEGORIARECEITA VARCHAR(10) PRIMARY KEY,
                NOCATEGORIARECEITA VARCHAR(100) NOT NULL
            )
        """)
        
        cursor.execute("""
            INSERT INTO dimensoes.categorias (COCATEGORIARECEITA, NOCATEGORIARECEITA) 
            VALUES 
                ('1000', 'Receitas Correntes'),
                ('2000', 'Receitas de Capital'),
                ('3000', 'Receitas Intraor√ßament√°rias'),
                ('9000', 'Dedu√ß√µes das Receitas')
            ON CONFLICT (COCATEGORIARECEITA) DO NOTHING
        """)
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS dimensoes.origens (
                COFONTERECEITA VARCHAR(10) PRIMARY KEY,
                NOFONTERECEITA VARCHAR(100) NOT NULL
            )
        """)
        
        cursor.execute("""
            INSERT INTO dimensoes.origens (COFONTERECEITA, NOFONTERECEITA) 
            VALUES 
                ('100', 'Receitas Pr√≥prias'),
                ('200', 'Transfer√™ncias Federais'),
                ('300', 'Transfer√™ncias Estaduais'),
                ('400', 'Outras Receitas')
            ON CONFLICT (COFONTERECEITA) DO NOTHING
        """)
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS dimensoes.especies (
                COSUBFONTERECEITA VARCHAR(10) PRIMARY KEY,
                NOSUBFONTERECEITA VARCHAR(100) NOT NULL
            )
        """)
        
        cursor.execute("""
            INSERT INTO dimensoes.especies (COSUBFONTERECEITA, NOSUBFONTERECEITA) 
            VALUES 
                ('01', 'Recursos Ordin√°rios'),
                ('02', 'Recursos Vinculados'),
                ('03', 'Recursos de Conv√™nios'),
                ('04', 'Outros Recursos')
            ON CONFLICT (COSUBFONTERECEITA) DO NOTHING
        """)
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS dimensoes.alineas (
                COALINEA VARCHAR(10) PRIMARY KEY,
                NOALINEA VARCHAR(100) NOT NULL
            )
        """)
        
        cursor.execute("""
            INSERT INTO dimensoes.alineas (COALINEA, NOALINEA) 
            VALUES 
                ('01', 'Tributos'),
                ('02', 'Contribui√ß√µes'),
                ('03', 'Receita Patrimonial'),
                ('04', 'Receita de Servi√ßos'),
                ('05', 'Transfer√™ncias Correntes'),
                ('06', 'Outras Receitas Correntes')
            ON CONFLICT (COALINEA) DO NOTHING
        """)
        
        # Commit das altera√ß√µes
        conn.commit()
        
        # Verifica se as tabelas foram criadas
        cursor.execute("""
            SELECT table_name FROM information_schema.tables 
            WHERE table_schema = 'dimensoes'
        """)
        
        tabelas = cursor.fetchall()
        print(f"‚úÖ Tabelas criadas no schema 'dimensoes': {len(tabelas)}")
        for tabela in tabelas:
            print(f"   - {tabela[0]}")
        
        cursor.close()
        conn.close()
        
        print("üéâ Setup das tabelas extras conclu√≠do!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar tabelas extras: {e}")
        return False

if __name__ == "__main__":
    criar_tabelas_extras()